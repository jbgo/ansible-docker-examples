- name: copy app src to build server
  synchronize: src={{app_src_path}} dest=/tmp

- name: generate the dockerfile
  template: src=Dockerfile.j2 dest=/tmp/{{app_src_path|basename}}/Dockerfile

# The docker_image module is deprecated, so I'm using the docker build command directly.
- name: build image
  command: 'docker build -t {{app_docker_image}}:{{app_docker_image_tag}} /tmp/{{app_src_path|basename}}'

# I'm not using the docker module here because it doesn't fail when the container exits
# with a non-zero exit status.
- name: run DB migrations
  command: "docker run --rm
    --link={{app_docker_links|join(' --link=')}} 
    -e DB_NAME={{pg_database}} -e DB_USER={{pg_user}} -e DB_PASS={{pg_password}}
    {{app_docker_image}} rake db:migrate"

- name: run the app
  docker:
    name: "{{app_container}}_{{item}}"
    image: "{{app_docker_image}}"
    state: reloaded
    publish_all_ports: yes
    links: "{{app_docker_links}}"
    env:
      DB_NAME: "{{pg_database}}"
      DB_USER: "{{pg_user}}"
      DB_PASS: "{{pg_password}}"
  with_sequence: count=3
  # NOTE - I tried using the count option for the docker module, but it's mutually
  # exclusive with the name option. I think it would be better if you could specify
  # both and this module would use the name as a prefix, just like docker compose
  # does. By using with_sequence, I can simulate this, but I have to add an extra
  # task to stop containers if I want to scale down. That's manual work that I would
  # prefer not to do.

# - name: uncomment this task and update the start/end sequence params to scale down your app
#   docker:
#     name: "{{app_container}}_{{item}}"
#     image: "{{app_docker_image}}"
#     state: stopped
#   with_sequence: start=4 end=5
